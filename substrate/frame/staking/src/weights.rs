//! Autogenerated weights for pallet_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-04, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/dock-node
// benchmark
// pallet
// --wasm-execution=compiled
// --pallet=pallet_staking
// --extra
// --repeat=20
// --extrinsic=*
// --steps=50
// --template=node/module-weight-template.hbs
// --output=./staking-weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_runtime::traits::Saturating;
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_staking.
pub trait WeightInfo {
    fn bond() -> Weight;
    fn bond_extra() -> Weight;
    fn unbond() -> Weight;
    fn withdraw_unbonded_update(s: u32) -> Weight;
    fn withdraw_unbonded_kill(s: u32) -> Weight;
    fn validate() -> Weight;
    fn kick(k: u32) -> Weight;
    fn nominate(n: u32) -> Weight;
    fn chill() -> Weight;
    fn set_payee() -> Weight;
    fn set_controller() -> Weight;
    fn set_validator_count() -> Weight;
    fn force_no_eras() -> Weight;
    fn force_new_era() -> Weight;
    fn force_new_era_always() -> Weight;
    fn set_invulnerables(v: u32) -> Weight;
    fn force_unstake(s: u32) -> Weight;
    fn cancel_deferred_slash(s: u32) -> Weight;
    fn payout_stakers_dead_controller(n: u32) -> Weight;
    fn payout_stakers_alive_staked(n: u32) -> Weight;
    fn rebond(l: u32) -> Weight;
    fn set_history_depth(e: u32) -> Weight;
    fn reap_stash(s: u32) -> Weight;
    fn new_era(v: u32, n: u32) -> Weight;
    fn payout_all(v: u32, n: u32) -> Weight;
    fn do_slash(l: u32) -> Weight;
    fn get_npos_voters(v: u32, n: u32, s: u32) -> Weight;
    fn get_npos_targets(v: u32) -> Weight;
    fn set_staking_configs_all_set() -> Weight;
    fn set_staking_configs_all_remove() -> Weight;
    fn chill_other() -> Weight;
    fn force_apply_min_commission() -> Weight;
}

/// Weights for pallet_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn bond() -> Weight {
        Weight::from_ref_time(37_000_000)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    fn bond_extra() -> Weight {
        Weight::from_ref_time(40_000_000)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    fn unbond() -> Weight {
        Weight::from_ref_time(42_000_000)
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    fn withdraw_unbonded_update(_s: u32) -> Weight {
        Weight::from_ref_time(32_104_000)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    fn withdraw_unbonded_kill(_s: u32) -> Weight {
        Weight::from_ref_time(42_687_000)
            .saturating_add(T::DbWeight::get().reads(10))
            .saturating_add(T::DbWeight::get().writes(7))
    }
    fn validate() -> Weight {
        Weight::from_ref_time(34_000_000)
            .saturating_add(T::DbWeight::get().reads(8))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    fn kick(k: u32) -> Weight {
        Weight::from_ref_time(25_052_000) // Standard Error: 20_000
            .saturating_add(Weight::from_ref_time(4_279_000).saturating_mul(k as u64))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().reads((1).saturating_mul(k as u64)))
            .saturating_add(T::DbWeight::get().writes(1.saturating_mul(k as u64)))
    }
    fn nominate(n: u32) -> Weight {
        Weight::from_ref_time(28_386_000) // Standard Error: 18_000
            .saturating_add(Weight::from_ref_time(2_218_000).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(8))
            .saturating_add(T::DbWeight::get().reads((1).saturating_mul(n as u64)))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    fn chill() -> Weight {
        Weight::from_ref_time(27_000_000)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    fn set_payee() -> Weight {
        Weight::from_ref_time(13_000_000)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    fn set_controller() -> Weight {
        Weight::from_ref_time(17_000_000)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    fn set_validator_count() -> Weight {
        Weight::from_ref_time(3_000_000).saturating_add(T::DbWeight::get().writes(1))
    }
    fn force_no_eras() -> Weight {
        Weight::from_ref_time(3_000_000).saturating_add(T::DbWeight::get().writes(1))
    }
    fn force_new_era() -> Weight {
        Weight::from_ref_time(3_000_000).saturating_add(T::DbWeight::get().writes(1))
    }
    fn force_new_era_always() -> Weight {
        Weight::from_ref_time(4_000_000).saturating_add(T::DbWeight::get().writes(1))
    }
    fn set_invulnerables(v: u32) -> Weight {
        Weight::from_ref_time(3_490_000) // Standard Error: 0
            .saturating_add(Weight::from_ref_time(6_000).saturating_mul(v as u64))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    fn force_unstake(s: u32) -> Weight {
        Weight::from_ref_time(41_211_000) // Standard Error: 5_000
            .saturating_add(Weight::from_ref_time(729_000).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(8))
            .saturating_add(T::DbWeight::get().writes(8))
            .saturating_add(T::DbWeight::get().writes(1.saturating_mul(s as u64)))
    }
    fn cancel_deferred_slash(s: u32) -> Weight {
        Weight::from_ref_time(169_799_000) // Standard Error: 7_000
            .saturating_add(Weight::from_ref_time(592_000).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    fn payout_stakers_dead_controller(n: u32) -> Weight {
        Weight::from_ref_time(112_914_000) // Standard Error: 50_000
            .saturating_add(Weight::from_ref_time(14_027_000).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(11))
            .saturating_add(T::DbWeight::get().reads((3).saturating_mul(n as u64)))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(T::DbWeight::get().writes(1.saturating_mul(n as u64)))
    }
    fn payout_stakers_alive_staked(n: u32) -> Weight {
        Weight::from_ref_time(154_745_000) // Standard Error: 74_000
            .saturating_add(Weight::from_ref_time(23_865_000).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(12))
            .saturating_add(T::DbWeight::get().reads((5).saturating_mul(n as u64)))
            .saturating_add(T::DbWeight::get().writes(4))
            .saturating_add(T::DbWeight::get().writes(3.saturating_mul(n as u64)))
    }
    fn rebond(l: u32) -> Weight {
        Weight::from_ref_time(40_454_000) // Standard Error: 7_000
            .saturating_add(Weight::from_ref_time(32_000).saturating_mul(l as u64))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    fn set_history_depth(e: u32) -> Weight {
        Weight::from_ref_time(0) // Standard Error: 91_000
            .saturating_add(Weight::from_ref_time(23_457_000).saturating_mul(e as u64))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1).saturating_mul(e as u64)))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes(7.saturating_mul(e as u64)))
    }
    fn reap_stash(s: u32) -> Weight {
        Weight::from_ref_time(47_355_000) // Standard Error: 4_000
            .saturating_add(Weight::from_ref_time(723_000).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(9))
            .saturating_add(T::DbWeight::get().writes(8))
            .saturating_add(T::DbWeight::get().writes(1.saturating_mul(s as u64)))
    }
    fn new_era(v: u32, n: u32) -> Weight {
        Weight::from_ref_time(0) // Standard Error: 786_000
            .saturating_add(Weight::from_ref_time(69_451_000).saturating_mul(v as u64)) // Standard Error: 75_000
            .saturating_add(Weight::from_ref_time(17_028_000).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(10))
            .saturating_add(T::DbWeight::get().reads((4).saturating_mul(v as u64)))
            .saturating_add(T::DbWeight::get().reads((3).saturating_mul(n as u64)))
            .saturating_add(T::DbWeight::get().writes(4))
            .saturating_add(T::DbWeight::get().writes(3.saturating_mul(v as u64)))
    }
    fn payout_all(v: u32, n: u32) -> Weight {
        Weight::from_ref_time(0) // Standard Error: 2_885_000
            .saturating_add(Weight::from_ref_time(1_181_052_000).saturating_mul(v as u64)) // Standard Error: 278_000
            .saturating_add(Weight::from_ref_time(124_077_000).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().reads((8).saturating_mul(v as u64)))
            .saturating_add(T::DbWeight::get().reads((5).saturating_mul(n as u64)))
            .saturating_add(T::DbWeight::get().writes(4.saturating_mul(v as u64)))
            .saturating_add(T::DbWeight::get().writes(3.saturating_mul(n as u64)))
    }
    fn do_slash(l: u32) -> Weight {
        Weight::from_ref_time(30_659_000) // Standard Error: 5_000
            .saturating_add(Weight::from_ref_time(22_000).saturating_mul(l as u64))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    fn get_npos_voters(v: u32, n: u32, s: u32) -> Weight {
        Weight::from_ref_time(0) // Standard Error: 313_000
            .saturating_add(Weight::from_ref_time(13_006_000).saturating_mul(v as u64)) // Standard Error: 156_000
            .saturating_add(Weight::from_ref_time(14_707_000).saturating_mul(n as u64)) // Standard Error: 802_000
            .saturating_add(Weight::from_ref_time(11_192_000).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().reads((4).saturating_mul(v as u64)))
            .saturating_add(T::DbWeight::get().reads((3).saturating_mul(n as u64)))
            .saturating_add(T::DbWeight::get().reads((1).saturating_mul(s as u64)))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    fn get_npos_targets(v: u32) -> Weight {
        Weight::from_ref_time(34_185_000) // Standard Error: 89_000
            .saturating_add(Weight::from_ref_time(6_066_000).saturating_mul(v as u64))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1).saturating_mul(v as u64)))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    fn set_staking_configs_all_set() -> Weight {
        Weight::from_ref_time(5_000_000).saturating_add(T::DbWeight::get().writes(6))
    }
    fn set_staking_configs_all_remove() -> Weight {
        Weight::from_ref_time(5_000_000).saturating_add(T::DbWeight::get().writes(6))
    }
    fn chill_other() -> Weight {
        Weight::from_ref_time(34_000_000)
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    fn force_apply_min_commission() -> Weight {
        Weight::from_ref_time(11_000_000)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn bond() -> Weight {
        Weight::from_ref_time(37_000_000)
            .saturating_add(RocksDbWeight::get().reads(5))
            .saturating_add(RocksDbWeight::get().writes(4))
    }
    fn bond_extra() -> Weight {
        Weight::from_ref_time(40_000_000)
            .saturating_add(RocksDbWeight::get().reads(4))
            .saturating_add(RocksDbWeight::get().writes(2))
    }
    fn unbond() -> Weight {
        Weight::from_ref_time(42_000_000)
            .saturating_add(RocksDbWeight::get().reads(7))
            .saturating_add(RocksDbWeight::get().writes(3))
    }
    fn withdraw_unbonded_update(_s: u32) -> Weight {
        Weight::from_ref_time(32_104_000)
            .saturating_add(RocksDbWeight::get().reads(4))
            .saturating_add(RocksDbWeight::get().writes(3))
    }
    fn withdraw_unbonded_kill(_s: u32) -> Weight {
        Weight::from_ref_time(42_687_000)
            .saturating_add(RocksDbWeight::get().reads(10))
            .saturating_add(RocksDbWeight::get().writes(7))
    }
    fn validate() -> Weight {
        Weight::from_ref_time(34_000_000)
            .saturating_add(RocksDbWeight::get().reads(8))
            .saturating_add(RocksDbWeight::get().writes(2))
    }
    fn kick(k: u32) -> Weight {
        Weight::from_ref_time(25_052_000) // Standard Error: 20_000
            .saturating_add(Weight::from_ref_time(4_279_000).saturating_mul(k as u64))
            .saturating_add(RocksDbWeight::get().reads(1))
            .saturating_add(RocksDbWeight::get().reads((1).saturating_mul(k as u64)))
            .saturating_add(RocksDbWeight::get().writes(1.saturating_mul(k as u64)))
    }
    fn nominate(n: u32) -> Weight {
        Weight::from_ref_time(28_386_000) // Standard Error: 18_000
            .saturating_add(Weight::from_ref_time(2_218_000).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(8))
            .saturating_add(RocksDbWeight::get().reads((1).saturating_mul(n as u64)))
            .saturating_add(RocksDbWeight::get().writes(2))
    }
    fn chill() -> Weight {
        Weight::from_ref_time(27_000_000)
            .saturating_add(RocksDbWeight::get().reads(4))
            .saturating_add(RocksDbWeight::get().writes(2))
    }
    fn set_payee() -> Weight {
        Weight::from_ref_time(13_000_000)
            .saturating_add(RocksDbWeight::get().reads(1))
            .saturating_add(RocksDbWeight::get().writes(1))
    }
    fn set_controller() -> Weight {
        Weight::from_ref_time(17_000_000)
            .saturating_add(RocksDbWeight::get().reads(3))
            .saturating_add(RocksDbWeight::get().writes(3))
    }
    fn set_validator_count() -> Weight {
        Weight::from_ref_time(3_000_000).saturating_add(RocksDbWeight::get().writes(1))
    }
    fn force_no_eras() -> Weight {
        Weight::from_ref_time(3_000_000).saturating_add(RocksDbWeight::get().writes(1))
    }
    fn force_new_era() -> Weight {
        Weight::from_ref_time(3_000_000).saturating_add(RocksDbWeight::get().writes(1))
    }
    fn force_new_era_always() -> Weight {
        Weight::from_ref_time(4_000_000).saturating_add(RocksDbWeight::get().writes(1))
    }
    fn set_invulnerables(v: u32) -> Weight {
        Weight::from_ref_time(3_490_000) // Standard Error: 0
            .saturating_add(Weight::from_ref_time(6_000).saturating_mul(v as u64))
            .saturating_add(RocksDbWeight::get().writes(1))
    }
    fn force_unstake(s: u32) -> Weight {
        Weight::from_ref_time(41_211_000) // Standard Error: 5_000
            .saturating_add(Weight::from_ref_time(729_000).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(8))
            .saturating_add(RocksDbWeight::get().writes(8))
            .saturating_add(RocksDbWeight::get().writes(1.saturating_mul(s as u64)))
    }
    fn cancel_deferred_slash(s: u32) -> Weight {
        Weight::from_ref_time(169_799_000) // Standard Error: 7_000
            .saturating_add(Weight::from_ref_time(592_000).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(1))
            .saturating_add(RocksDbWeight::get().writes(1))
    }
    fn payout_stakers_dead_controller(n: u32) -> Weight {
        Weight::from_ref_time(112_914_000) // Standard Error: 50_000
            .saturating_add(Weight::from_ref_time(14_027_000).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(11))
            .saturating_add(RocksDbWeight::get().reads((3).saturating_mul(n as u64)))
            .saturating_add(RocksDbWeight::get().writes(3))
            .saturating_add(RocksDbWeight::get().writes(1.saturating_mul(n as u64)))
    }
    fn payout_stakers_alive_staked(n: u32) -> Weight {
        Weight::from_ref_time(154_745_000) // Standard Error: 74_000
            .saturating_add(Weight::from_ref_time(23_865_000).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(12))
            .saturating_add(RocksDbWeight::get().reads((5).saturating_mul(n as u64)))
            .saturating_add(RocksDbWeight::get().writes(4))
            .saturating_add(RocksDbWeight::get().writes(3.saturating_mul(n as u64)))
    }
    fn rebond(l: u32) -> Weight {
        Weight::from_ref_time(40_454_000) // Standard Error: 7_000
            .saturating_add(Weight::from_ref_time(32_000).saturating_mul(l as u64))
            .saturating_add(RocksDbWeight::get().reads(5))
            .saturating_add(RocksDbWeight::get().writes(3))
    }
    fn set_history_depth(e: u32) -> Weight {
        Weight::from_ref_time(0) // Standard Error: 91_000
            .saturating_add(Weight::from_ref_time(23_457_000).saturating_mul(e as u64))
            .saturating_add(RocksDbWeight::get().reads(2))
            .saturating_add(RocksDbWeight::get().reads((1).saturating_mul(e as u64)))
            .saturating_add(RocksDbWeight::get().writes(1))
            .saturating_add(RocksDbWeight::get().writes(7.saturating_mul(e as u64)))
    }
    fn reap_stash(s: u32) -> Weight {
        Weight::from_ref_time(47_355_000) // Standard Error: 4_000
            .saturating_add(Weight::from_ref_time(723_000).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(9))
            .saturating_add(RocksDbWeight::get().writes(8))
            .saturating_add(RocksDbWeight::get().writes(1.saturating_mul(s as u64)))
    }
    fn new_era(v: u32, n: u32) -> Weight {
        Weight::from_ref_time(0) // Standard Error: 786_000
            .saturating_add(Weight::from_ref_time(69_451_000).saturating_mul(v as u64)) // Standard Error: 75_000
            .saturating_add(Weight::from_ref_time(17_028_000).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(10))
            .saturating_add(RocksDbWeight::get().reads((4).saturating_mul(v as u64)))
            .saturating_add(RocksDbWeight::get().reads((3).saturating_mul(n as u64)))
            .saturating_add(RocksDbWeight::get().writes(4))
            .saturating_add(RocksDbWeight::get().writes(3.saturating_mul(v as u64)))
    }
    fn payout_all(v: u32, n: u32) -> Weight {
        Weight::from_ref_time(0) // Standard Error: 2_885_000
            .saturating_add(Weight::from_ref_time(1_181_052_000).saturating_mul(v as u64)) // Standard Error: 278_000
            .saturating_add(Weight::from_ref_time(124_077_000).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4))
            .saturating_add(RocksDbWeight::get().reads((8).saturating_mul(v as u64)))
            .saturating_add(RocksDbWeight::get().reads((5).saturating_mul(n as u64)))
            .saturating_add(RocksDbWeight::get().writes(4.saturating_mul(v as u64)))
            .saturating_add(RocksDbWeight::get().writes(3.saturating_mul(n as u64)))
    }
    fn do_slash(l: u32) -> Weight {
        Weight::from_ref_time(30_659_000) // Standard Error: 5_000
            .saturating_add(Weight::from_ref_time(22_000).saturating_mul(l as u64))
            .saturating_add(RocksDbWeight::get().reads(3))
            .saturating_add(RocksDbWeight::get().writes(2))
    }
    fn get_npos_voters(v: u32, n: u32, s: u32) -> Weight {
        Weight::from_ref_time(0) // Standard Error: 313_000
            .saturating_add(Weight::from_ref_time(13_006_000).saturating_mul(v as u64)) // Standard Error: 156_000
            .saturating_add(Weight::from_ref_time(14_707_000).saturating_mul(n as u64)) // Standard Error: 802_000
            .saturating_add(Weight::from_ref_time(11_192_000).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(6))
            .saturating_add(RocksDbWeight::get().reads((4).saturating_mul(v as u64)))
            .saturating_add(RocksDbWeight::get().reads((3).saturating_mul(n as u64)))
            .saturating_add(RocksDbWeight::get().reads((1).saturating_mul(s as u64)))
            .saturating_add(RocksDbWeight::get().writes(1))
    }
    fn get_npos_targets(v: u32) -> Weight {
        Weight::from_ref_time(34_185_000) // Standard Error: 89_000
            .saturating_add(Weight::from_ref_time(6_066_000).saturating_mul(v as u64))
            .saturating_add(RocksDbWeight::get().reads(2))
            .saturating_add(RocksDbWeight::get().reads((1).saturating_mul(v as u64)))
            .saturating_add(RocksDbWeight::get().writes(1))
    }
    fn set_staking_configs_all_set() -> Weight {
        Weight::from_ref_time(5_000_000).saturating_add(RocksDbWeight::get().writes(6))
    }
    fn set_staking_configs_all_remove() -> Weight {
        Weight::from_ref_time(5_000_000).saturating_add(RocksDbWeight::get().writes(6))
    }
    fn chill_other() -> Weight {
        Weight::from_ref_time(34_000_000)
            .saturating_add(RocksDbWeight::get().reads(7))
            .saturating_add(RocksDbWeight::get().writes(2))
    }
    fn force_apply_min_commission() -> Weight {
        Weight::from_ref_time(11_000_000)
            .saturating_add(RocksDbWeight::get().reads(2))
            .saturating_add(RocksDbWeight::get().writes(1))
    }
}
